// FILE: queue4.template
// TEMPLATE CLASS IMPLEMENTED: Queue<Item> (see queue4.h for documentation)
// This file is included in the header file, and not compiled separately.
// INVARIANT for the Queue class:
//   1. The number of items in the queue is stored in the member variable
//      count.
//   2. The items in the queue are stored in a linked list, with the front of
//      the queue stored at the head node, and the rear of the queue stored at
//      the final node.
//   3. The member variable front_ptr is the head pointer of the linked list of
//      items. For a non-empty queue, the member variable rear_ptr is the
//      tail pointer of the linked list; for an empty list, we don't care
//      what's stored in rear_ptr.
// Modified by: Bryan Berkey
// Added Methods: Enqueue, Dequeue, isInQ


#include <cassert>   // Provides assert
#include "node2.h"   // Node template class

namespace main_savitch_8C
{
    template <class Item>
    queue<Item>::queue( )
    {
        count = 0;
        front_ptr = NULL;
    }

    template <class Item>
    queue<Item>::queue(const queue<Item>& source)
    // Library facilities used: node2.h
    {
	count = source.count;
	list_copy(source.front_ptr, front_ptr, rear_ptr);
    }

    template <class Item>
    queue<Item>::~queue( )
    {
        list_clear(front_ptr);
    }

    template <class Item>
    void queue<Item>::operator =(const queue<Item>& source)
    // Library facilities used: node2.h
    {
        if (this == &source) // Handle self-assignment
            return;
        list_clear(front_ptr);
        list_copy(source.front_ptr, front_ptr, rear_ptr);
        count = source.count;
    }

    template <class Item>
    Item& queue<Item>::front( ) 
    // Library facilities used: cassert
    {
        assert(!empty( ));    
        return front_ptr->data( );
    }

    template <class Item>
    const Item& queue<Item>::front( ) const
    // Library facilities used: cassert
    {
        assert(!empty( ));    
        return front_ptr->data( );
    }
    
    template <class Item>
    void queue<Item>::pop( )
    // Library facilities used: cassert, node2.h
    {
        assert(!empty( ));
	list_head_remove(front_ptr);
	--count;
    }
    
    template <class Item>
    void queue<Item>::push(const Item& entry)
    // Library facilities used: node2.h
    {
        if (empty( ))
        {   // Insert first entry.
            list_head_insert(front_ptr, entry);
            rear_ptr = front_ptr;
        }
        else
        {   // Insert an entry that is not the first.
            list_insert(rear_ptr, entry);
            rear_ptr = rear_ptr->link( );
        }
        ++count;
    }
    
    // C243 students: Remove this line and next line nd add 3 methods here. Use my
    // function header comment style to document each method.
    
  //Enqueue: inserting into the queue
  //Inputs: the item being inserted into the queue
  //Outputs: Nothing
    template <class Item>
    void queue<Item>::enqueue(const Item& entry) {
	push(entry);	
    }
   
  //Dequeue: "returning" what at the front of the queue to the screen and then
  //removing it from the queue
  //Inputs: Nothing.
  //Outputs: outputting to the screeen whats at the front of the queue.
    template <class Item>
    Item& queue<Item>::dequeue( ) {
	std::cout << front( ) << " has been dequeued " << std::endl;
	pop( );
    }
   
  //isInQ: moves through the queue and if we find the item in the queue then return true
  //else return false.
  //Inputs: Entry; the item we are looking for in the queue.
  //Outputs: Return true if found in the queue. Else return false. 
    template <class Item>
    bool queue<Item>::isInQ(const Item& entry) {
	
	iterator position;
	
	if(empty( )) {
		std::cout << "queue is empty " << std::endl;
		return 0;
	}
	for(position = begin( ); position != end( ); ++position) {
		if(*position == entry) {
			std::cout << entry << " is in the queue " << std::endl;
			return 1;
		}
	}
	std::cout << entry << " is not in the queue " << std::endl;
	return 0;
    }
}

